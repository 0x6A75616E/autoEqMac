// Code generated by MockGen. DO NOT EDIT.
// Source: eq.go

// Package autoeq is a generated GoMock package.
package autoeq

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockEQGetter is a mock of EQGetter interface
type MockEQGetter struct {
	ctrl     *gomock.Controller
	recorder *MockEQGetterMockRecorder
}

// MockEQGetterMockRecorder is the mock recorder for MockEQGetter
type MockEQGetterMockRecorder struct {
	mock *MockEQGetter
}

// NewMockEQGetter creates a new mock instance
func NewMockEQGetter(ctrl *gomock.Controller) *MockEQGetter {
	mock := &MockEQGetter{ctrl: ctrl}
	mock.recorder = &MockEQGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEQGetter) EXPECT() *MockEQGetterMockRecorder {
	return m.recorder
}

// GetEQ mocks base method
func (m *MockEQGetter) GetEQ(meta EQMetadata) ([]byte, error) {
	ret := m.ctrl.Call(m, "GetEQ", meta)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEQ indicates an expected call of GetEQ
func (mr *MockEQGetterMockRecorder) GetEQ(meta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEQ", reflect.TypeOf((*MockEQGetter)(nil).GetEQ), meta)
}

// GetFixedBandGlobalPreamp mocks base method
func (m *MockEQGetter) GetFixedBandGlobalPreamp(meta EQMetadata) (float64, error) {
	ret := m.ctrl.Call(m, "GetFixedBandGlobalPreamp", meta)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFixedBandGlobalPreamp indicates an expected call of GetFixedBandGlobalPreamp
func (mr *MockEQGetterMockRecorder) GetFixedBandGlobalPreamp(meta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFixedBandGlobalPreamp", reflect.TypeOf((*MockEQGetter)(nil).GetFixedBandGlobalPreamp), meta)
}

// MockDoer is a mock of Doer interface
type MockDoer struct {
	ctrl     *gomock.Controller
	recorder *MockDoerMockRecorder
}

// MockDoerMockRecorder is the mock recorder for MockDoer
type MockDoerMockRecorder struct {
	mock *MockDoer
}

// NewMockDoer creates a new mock instance
func NewMockDoer(ctrl *gomock.Controller) *MockDoer {
	mock := &MockDoer{ctrl: ctrl}
	mock.recorder = &MockDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDoer) EXPECT() *MockDoerMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockDoer) Do(arg0 *http.Request) (*http.Response, error) {
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockDoerMockRecorder) Do(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDoer)(nil).Do), arg0)
}
